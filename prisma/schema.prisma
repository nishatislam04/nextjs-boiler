generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DOCKER")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  image         String?
  username      String    @unique
  password      String?
  emailVerified Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  roles    Role[]
  account  Account[]
  posts    Post[]
  profile  Profile?
  sessions Session[]
}

model Post {
  id               Int       @id @default(autoincrement())
  title            String
  slug             String    @unique
  description      String?   @db.LongText
  shortDescription String?
  // metaTitle        String?
  // metaDescription  String?
  published        Boolean   @default(false)
  publishedAt      DateTime?
  deletedAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]
  tags       Tag[]
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([authorId], map: "Post_authorId_fkey")
  @@fulltext([title, description, shortDescription])
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?  @db.LongText
  userId    String   @unique
  website   String?
  location  String?
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Boolean   @default(false)
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Boolean   @default(false)
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Role {
  id        Int      @id @default(autoincrement())
  role      UserRole @unique
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

enum UserRole {
  Super
  Admin
  Moderator
  Writer
  Viewer
  Member
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
