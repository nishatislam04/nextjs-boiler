generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["strictUndefinedChecks"]
}

// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
//   directUrl         = env("DIRECT_URL")
//   shadowDatabaseUrl = "postgresql://shadow_user:shadow_pass@postgres:5432/shadow_db"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL_DOCKER")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_NEON")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  image         String?
  username      String    @unique
  password      String?
  emailVerified Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  roles    Role[]     @relation("UserRoles")
  account  Account[]
  posts    Post[]
  profile  Profile?
  sessions Session[]
  UserRole UserRole[]
}

model Post {
  id               Int       @id @default(autoincrement())
  title            String
  slug             String    @unique
  // description      String?
  description      String?   @db.Text
  shortDescription String
  published        Boolean   @default(false)
  publishedAt      DateTime?
  deletedAt        DateTime?
  coverPhoto       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]
  tags       Tag[]
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  // @@fulltext([title, description, shortDescription])

  @@index([authorId])
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  userId    String   @unique
  website   String?
  location  String?
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Boolean   @default(false)
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Boolean   @default(false)
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Role {
  id       String     @id @default(uuid())
  name     String     @unique
  users    User[]     @relation("UserRoles")
  UserRole UserRole[]
}

model UserRole {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  @@unique([userId, roleId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  // access_token             String?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
